=head1 NAME

ncRNAScan

=head1 SYNOPSIS

ncRNAScan is a pipeline to extract putative novel ncRNAs ab initio, given a list of transcripts in GTF format assembled from deep sequencing data (ex: RNA-Seq).

Complete Description: 

 perldoc ncRNAScan

Examples:

 perl ncRNAScan -h

 perl ncRNAScan -run /data/ncRNAScan/ -cuffcmp '-r annotation.gtf -s genome.fa transcripts1.gtf transscripts2.gtf' -cat-ncRNAs '-fpkm 2 -l 200 -min-exons 2 -antisense' -get-uq-feat '-sf known_ncRNAs.bed' -fetch-seq '-db mm10' -cpc -rna -inf


=head1 DESCRIPTION

This pipeline script will bind together the functionality of the tools / scripts: Cuffcompare, categorize_ncRNAs.pl, get_unique_features.pl, fetch_seq_from_ucsc.pl, RNAfold, Infernal and Coding Potential Calculator (CPC). Transcriptome construction tools such as Cufflinks produces a set of assembled transcripts in GTF format. ncRNAScan uses this data in addition to known gene annotation to extract putative ncRNAs constructed by the ab initio assemblers. The pipeline relies on the FPKM / RPKM values generated by these assemblers to assess the confidence of the constructed de novo transcripts and validates it against the known refenrece gene and non coding RNA informationto identify putative novel ncRNAs.  In brief, the pipeline steps are as follows:

=over 5

=item 1. Cuffcompare (ncRNAScan Option: -cuff or --cuffcompare)

The transcript assembly can be compared to known annotation of choice to classify them into different class codes (http://cufflinks.cbcb.umd.edu/manual.html#class_codes) using Cuffcompare. The assembled transcripts should be in GTF format. Cufflinks generates the output files in GTF format. If you are using other software such as Scripture, you can convert the output file in BED format into GTF using Scripture as:

 java -jar /path/to/scripture.jar -task toGFF -cufflinks -in scripture.out.bed -source SCRIPTURE -out scripture.out.gtf

To get help documentation about this module, run:

 perl ncRNAScan -h cuff

=item 2. categorize_ncRNAs.pl (ncRNAScan Option: -cat or --cat-ncRNAs)
    
ncRNAScan uses the tracking file (*.tracking) produced by Cuffcompare, annotation data in gene prediction format and a list of supplied transcripts in GTF format to produce and categorize ncRNAs into different classes as mentioned in the paper, http://genome.cshlp.org/content/22/3/577.full. In brief, the ncRNAs are classified into 5 categories: Long intergenic ncRNAs (LincRNAs), Intronic contained lncRNAs (Incs), Partially overlapping lncRNAs (Poncs), Completely overlapping lncRNAs (Concs) and Exonic overlaps (LncRNAs with sense or antisense overlap with reference exon).

To get help documentation about this module, run:

 perl ncRNAScan -h cat

=item 3. get_unique_features.pl (ncRNAScan Option: -get or --get--uq-feat)
    
It then compares the putative list with supplied known ncRNAs in BED format to get features that do not overlap any known ncRNAs.

To get help documentation about this module, run:

 perl ncRNAScan -h get

=item 4. fetch_seq_from_ucsc.pl (ncRNAScan Option: -fetch or --fetch-seq)
    
This list is then used to fetch DNA sequence of those transcript sequences to determine their coding potential using CPC.
    
To get help documentation about this module, run:
    
 perl ncRNAScan -h fetch

=item 5. CPC.sh (ncRNAScan Option -cpc or --cpc)
    
In this step, the fetched FASTA sequences are used to determine the coding potential and those that are flagged as "noncoding" are used to create the final list of high confidence ncRNAs. This step may take a while to finish.

To get help documentation about this module, run:

 perl ncRNAScan -h cpc

=item 6. RNAfold (ncRNAScan Option -rna or --rnafold)

Here, ncRNAScan pipeline invokes RNAfold program to calculate minimum free energy structure of the predicted non-coding RNA. This step may take a while to finish.
                                                                                                                                                                
To get help documentation about this module, run:
    
 perl ncRNAScan -h rna

=item 7. Infernal (ncRNAScan Option -inf or --infernal)

In the final step, ncRNAScan pipeline invokes cmscan from Infernal package to search Rfam databases for sturcture and sequence similarities to annotate the putative ncRNAs .
                                                                                                                                                                
To get help documentation about this module, run:
    
 perl ncRNAScan -h inf

=back

The final output is a putative list of annotated ncRNAs in GTF format that can be directly uploaded as custom tracks to Genome Browsers, such as UCSC etc... and predicted secondary structures by RNAfold.

The pipeline has the ability to run each of these individual modules if any of them fail during the initial run.

=head1 EXAMPLE

=head2 Installation:

=over 5

=item * This script will try its best to setup the pipeline on the suitable architecture.

 perl ncRNAScan -setup

=back

=head2 Start the Pipeline:

=over 5

=item * Run the complete pipeline:

 perl ncRNAScan -run /data/ncRNAScan/ -cuff '-r /data/projects/mm10/macrophages/rna-seq/cuffcompare.m0.m1.m2_vs_ensembl_ref_known/refSeq_UCSCKnownGenes_Ensemble.gtf -s /data/ref_fasta/mm10_UCSC/whole_genome.fa /data/projects/mm10/macrophages/rna-seq/m0/cufflinks/transcripts.gtf /data/projects/mm10/macrophages/rna-seq/m1/cufflinks/transcripts.gtf /data/projects/mm10/macrophages/rna-seq/m2/cufflinks/transcripts.gtf' -cat '-clean -overlap 1.1 -min-exons 1 -fpkm 2 -antisense -sample-names "M0,M1,M2"' -get '-sf /data/projects/mm10/macrophages/ncrna/known_ref_ncRNAs/mm10_ncRNA.bed' -fetch '-db mm10' -cpc

=item * Run categorize_ncRNAs module of the pipeline:
    
 perl ncRNAScan -run /data/ncRNAScan/ -cat '-clean -overlap 1.1 -min-exons 1 -fpkm 2 -annotation /data/projects/mm10/macrophages/ncrna/2lncRNA/allGenes.txt -antisense -sample-names "M0,M1,M2" /data/projects/mm10/macrophages/rna-seq/m0/cufflinks/transcripts.gtf /data/projects/mm10/macrophages/rna-seq/m1/cufflinks\
/transcripts.gtf /data/projects/mm10/macrophages/rna-seq/m2/cufflinks/transcripts.gtf'

=item * Run get_unique_features module of the pipeline:
    
 perl ncRNAScan -run /data/ncRNAScan -get '-sf /data/projects/mm10/macrophages/ncrna/known_ref_ncRNAs/mm10_ncRNA.bed'

=item * Run fetch_unique_features module of the pipeline:

 perl ncRNAScan -run /data/ncRNAScan -fetch '-db mm10'

=item * Run CPC module of the pipeline:

 perl ncRNAScan -run /data/ncRNAScan -cpc

=item * Run RNAfold module of the pipeline:

 perl ncRNAScan -run /data/ncRNAScan -rna

=item * Run Infernal module of the pipeline:

 perl ncRNAScan -run /data/ncRNAScan -inf

=back

=head1 OPTIONS

ncRNAScan takes the following arguments:

=over 4

=item -h or --help (Optional)
    
Displays this helpful message.

=item -setup or --setup
    
Try to setup the pipeline with all its dependencies.

=item -run or --run

Run the ncRNAScan pipeline with output directory supplied as option.
Ex: perl ncRNAScan -run /home/konganti/ncRNAScan_output ...

=item -cuff or --cuffcompare (Optional)

Run the Cuffcompare module with supplied options.

=item -cat or --cat-ncRNAs (Optional)

Run the categorize_ncRNAs.pl module with supplied options.

=item -get or --get-uq-feat (Optional)

Run the get_unique_features.pl module with supplied options.

=item -fetch or --fetch-seq (Optional)

Run the fetch_seq_from_ucsc.pl module with supplied options.

=item -cpc or --cpc (Optional)

Run the CPC module. No options are required.

=item -rna or --rnafold 

Run RNAfold module of the pipeline. No options required

=back

=head1 AUTHOR

Kranti Konganti, E<lt>konganti@tamu.eduE<gt>.

=head1 COPYRIGHT

This program is distributed under the Artistic License.

=head1 DATE

May-07-2014

=cut
