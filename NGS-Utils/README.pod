=head1 NAME

 _            ____  _   _    _          _            
| |_ __   ___|  _ \| \ | |  / \   _ __ (_)_ __   ___ 
| | '_ \ / __| |_) |  \| | / _ \ | '_ \| | '_ \ / _ \
| | | | | (__|  _ <| |\  |/ ___ \| |_) | | |_) |  __/
|_|_| |_|\___|_| \_|_| \_/_/   \_| .__/|_| .__/ \___|
                                 |_|     |_|         

=head1 SYNOPSIS

lncRNApipe is a pipeline to extract putative novel lncRNAs ab initio, given a list of transcripts in GTF format assembled from deep sequencing data (ex: RNA-Seq).

Complete Description: 

 perldoc lncRNApipe

Examples:

 perl lncRNApipe -h

 perl lncRNApipe -run /data/lncRNApipe/ -cuffcmp '-r annotation.gtf -s genome.fa transcripts1.gtf transcripts2.gtf' -cat-ncRNAs "-sample-names 'M1,M2' -ov 50 -fpkm 2 -len 200 -max-len 10000 -min-exons 1 -antisense" -get-uq-feat '-sf known_lncRNAs.bed' -fetch-seq '-db mm10' -cpc -rna -inf


=head1 DESCRIPTION

This pipeline script will bind together the functionality of the tools / scripts: cuffcompare, categorize_ncRNAs.pl, get_unique_features.pl, fetch_seq_from_ucsc.pl, RNAfold, Infernal and Coding Potential Calculator (CPC). Transcriptome construction tools such as Cufflinks produces a set of assembled transcripts in GTF format. lncRNApipe uses this data in addition to known gene annotation to extract putative lncRNAs constructed by the ab initio assemblers. The pipeline relies on the FPKM / RPKM values generated by these assemblers to assess the confidence of the constructed de novo transcripts and validates it against the known reference gene and non coding RNA information to identify putative novel lncRNAs. In brief, the pipeline steps are as follows:

=over 5

=item 1. Cuffcompare (lncRNApipe Option: -cuff or --cuffcompare)

The transcript assembly can be compared to known annotation of choice to classify them into different class codes (http://cufflinks.cbcb.umd.edu/manual.html#class_codes) using Cuffcompare. The assembled transcripts should be in GTF format. Cufflinks generates the output files in GTF format. If you are using other software such as Scripture, you can convert the output file in BED format into GTF using Scripture as:

 java -jar /path/to/scripture.jar -task toGFF -cufflinks -in scripture.out.bed -source SCRIPTURE -out scripture.out.gtf

To get help documentation about this module, run:

 perl lncRNApipe -h cuff

=item 2. categorize_ncRNAs.pl (lncRNApipe Option: -cat or --cat-ncRNAs)
    
lncRNApipe uses the tracking file (*.tracking) produced by Cuffcompare, annotation data in gene prediction format and a list of supplied transcripts in GTF format to produce and categorize lncRNAs into different classes as mentioned in the paper: http://genome.cshlp.org/content/22/3/577.full. In brief, the lncRNAs are classified into 5 categories: Long intergenic lncRNAs (LincRNAs), Intronic contained lncRNAs (Incs), Partially overlapping lncRNAs (Poncs), Completely overlapping lncRNAs (Concs) and Exonic overlaps (LncRNAs with sense or antisense overlap with reference exon).

To get help documentation about this module, run:

 perl lncRNApipe -h cat

=item 3. get_unique_features.pl (lncRNApipe Option: -get or --get--uq-feat)
    
It then compares the putative list with supplied known lncRNAs in BED format to get features that do not overlap any known lncRNAs. To extract known lncRNAs from your assembled transcripts for downstream analysis, include --known with -get option of lncRNAscan (--known option with lncRNApipe is experimental).

To get help documentation about this module, run:

 perl lncRNApipe -h get

=item 4. fetch_seq_from_ucsc.pl (lncRNApipe Option: -fetch or --fetch-seq)
    
This list is then used to fetch DNA sequence of those transcript sequences to determine their coding potential using CPC.
    
To get help documentation about this module, run:
    
 perl lncRNApipe -h fetch

=item 5. CPC.sh (lncRNApipe Option -cpc or --cpc)
    
In this step, the fetched FASTA sequences are used to determine the coding potential and those that are flagged as "noncoding" are used to create the final list of high confidence lncRNAs. This step may take a while to finish.

To get help documentation about this module, run:

 perl lncRNApipe -h cpc

=item 6. RNAfold (lncRNApipe Option -rna or --rnafold)

Here, lncRNApipe pipeline invokes RNAfold program to calculate minimum free energy structure of the predicted non-coding RNA. This step may take a while to finish.
                                                                                                                                                                
To get help documentation about this module, run:
    
 perl lncRNApipe -h rna

=item 7. Infernal (lncRNApipe Option -inf or --infernal)

In the final step, lncRNApipe pipeline invokes cmscan from Infernal package to search Rfam databases for sturcture and sequence similarities to annotate the putative lncRNAs .
                                                                                                                                                                
To get help documentation about this module, run:
    
 perl lncRNApipe -h inf

=back

=head1 Output

The final output is a putative list of annotated lncRNAs in GTF format that can be directly uploaded as custom tracks to Genome Browsers, such as UCSC etc... and predicted secondary structures by RNAfold. 

=over 5

=item * Cuffcompare output is stored in the directory called "cuffcompare". lncRNApipe uses 'lncRNApipe_cuffcmp.tracking' file from this folder for the next module.

=item * categorize_ncRNAs.pl's output is stored in the directory called "categorize_ncRNAs". lncRNApipe uses files ending with suffix '.putative.class.ncRNAs.gtf' for the next module.

=item * get_unique_features.pl's output is stored in the directory called "get_unique_features". lncRNApipe uses files ending with suffix '.putative.class.ncRNAs.unique.gtf ' for the next module

=item * fetch_seq_from_ucsc.pl's output is stored in the directory called "fetch_seq_from_ucsc". lncRNApipe uses these FASTA seqeunce files to run CPC, RNAfold and Infernal modules.

=item * CPC predictions are stored in a directory called "CPC".

=item * The final result files are stored in a directory called lncRNApipe.final and have a suffix '.putative.class.ncRNAs.unique.final.gtf'.

=item * The RNAfold plots are stored in directories inside lncRNApipe.final directory ending in suffix '.putative.class.ncRNAs.unique.final.RNAfold'.

=back

The pipeline has the ability to run each of these individual modules if any of them fail during the initial run.

=head1 EXAMPLE

=head2 Installation:

=over 5

=item * This script will try its best to setup the pipeline on the suitable architecture.

 perl lncRNApipe -setup

=back

=head2 Start the Pipeline:

=over 5

=item * Run the complete pipeline:

 perl lncRNApipe -run /data/lncRNApipe/ -cuff '-r /data/projects/mm10/macrophages/rna-seq/cuffcompare.m0.m1.m2_vs_ensembl_ref_known/refSeq_UCSCKnownGenes_Ensemble.gtf -s /data/ref_fasta/mm10_UCSC/whole_genome.fa /data/projects/mm10/macrophages/rna-seq/m0/cufflinks/transcripts.gtf /data/projects/mm10/macrophages/rna-seq/m1/cufflinks/transcripts.gtf /data/projects/mm10/macrophages/rna-seq/m2/cufflinks/transcripts.gtf' -cat '-clean -overlap 50 -len 200 -max-len 10000 -min-exons 1 -fpkm 2 -antisense -sample-names "M0,M1,M2"' -get '-sf /data/projects/mm10/macrophages/ncrna/known_ref_lncRNAs/mm10_ncRNA.bed' -fetch '-db mm10' -cpc

=item * Run categorize_ncRNAs module of the pipeline:
    
 perl lncRNApipe -run /data/lncRNApipe/ -cat '-clean -overlap 50 -len 200 -max-len 10000 -min-exons 1 -fpkm 2 -annotation /data/projects/mm10/macrophages/ncrna/2lncRNA/allGenes.txt -antisense -sample-names "M0,M1,M2" /data/projects/mm10/macrophages/rna-seq/m0/cufflinks/transcripts.gtf /data/projects/mm10/macrophages/rna-seq/m1/cufflinks/transcripts.gtf /data/projects/mm10/macrophages/rna-seq/m2/cufflinks/transcripts.gtf'

=item * Run get_unique_features module of the pipeline to extract novel lncRNAs:
    
 perl lncRNApipe -run /data/lncRNApipe -get '-sf /data/projects/mm10/macrophages/ncrna/known_ref_lncRNAs/mm10_ncRNA.bed'

=item * Run get_unique_features module of the pipeline to extract known lncRNAs:
    
 perl lncRNApipe -run /data/lncRNApipe -get '--known -sf /data/projects/mm10/macrophages/ncrna/known_ref_lncRNAs/mm10_ncRNA.bed'

=item * Run fetch_unique_features module of the pipeline:

 perl lncRNApipe -run /data/lncRNApipe -fetch '-db mm10'

=item * Run CPC module of the pipeline:

 perl lncRNApipe -run /data/lncRNApipe -cpc

=item * Run RNAfold module of the pipeline:

 perl lncRNApipe -run /data/lncRNApipe -rna

=item * Run Infernal module of the pipeline:

 perl lncRNApipe -run /data/lncRNApipe -inf

=back

=head1 OPTIONS

lncRNApipe takes the following arguments:

=over 4

=item -v or --version (Optional)
    
Displays version information and quits.

=item -d or --no-update-chk (Optional)
    
Disable software update check.

=item -h or --help (Optional)
    
Displays this helpful message.

=item -setup or --setup
    
Try to setup the pipeline with all its dependencies.

=item -run or --run

Run the lncRNApipe pipeline with output directory supplied as option.
Ex: perl lncRNApipe -run /home/konganti/lncRNApipe_output ...

=item -cuff or --cuffcompare

Run the Cuffcompare module with supplied options.

=item -cat or --cat-ncRNAs

Run the categorize_ncRNAs.pl module with supplied options.

=item -get or --get-uq-feat

Run the get_unique_features.pl module with supplied options.

=item -fetch or --fetch-seq

Run the fetch_seq_from_ucsc.pl module with supplied options.

=item --skip-get (--fetch-seq option required)

Run the fetch_seq_from_ucsc.pl module without running get_unique_features.pl module.
In some cases, you may not have a file of known non-coding RNAs. In such cases,
you can skip get_unique_features.pl module, and directly fetch FASTA sequences for
features from --categorize_ncRNAs.pl module.

=item -cpc or --cpc

Run the CPC module. No options are required.

=item --skip-cpc-core

Skip runnning core CPC process once you know you have output from CPC.
This option can be used when lncRNApipe fails for some reason after blastall
within CPC has finished running but unable to continue forward.

=item -rna or --rnafold

Run RNAfold module of the pipeline. No options required

=item --skip-rnafold-core

Skip runnning core RNAfold process once you know you have output from RNAfold.
This option can be used when you want lncRNApipe to generate plots based on
output from RNAfold which should have completed successfully.

=item -inf or --infernal

Run Infernal module of the pipeline. No options required

=item --skip-cmscan-core

Skip runnning cmscan process once you know you have output from a successful 
cmscan run. This option can be used when you want lncRNApipe to extract 
annotation from infernal and attempt to annotate putative novel lncRNAs.

=item -cov-inf or --coverage-infernal

Only annotate final putative lncRNAs which have cmscan match over this much percentage of sequence.
Default: 75

=item -cpu or --cpu

lncRNApipe will attempt to run multiple processes on this may CPU cores.
Mentioning number of CPUs equal to or more than number of assembled 
transcript files is strongly encouraged.

=back

=head1 AUTHOR

Kranti Konganti, E<lt>konganti@tamu.eduE<gt>.

=head1 COPYRIGHT

This program is distributed under the Artistic License.

=head1 DATE

September-22-2014

=cut
