#!/usr/bin/env perl

use strict;
use warnings;
use Getopt::Long;
use File::Temp;
use Term::ANSIColor qw(:constants);

my ($LASTCHANGEDBY) = q$LastChangedBy: konganti $ =~ m/.+?\:(.+)/;
my ($LASTCHANGEDDATE) = q$LastChangedDate: 2013-10-09 12:46:11 -0500 (Wed, 09 Oct 2013) $ =~ m/.+?\:(.+)/;
my ($VERSION) = q$LastChangedRevision: 64 $ =~ m/.+?(\d+)/;
my $AUTHORFULLNAME = 'Kranti Konganti';

my ($help, $quiet, $setup, $get_uq_sc_opts,
    $fetch_sc_opts, $categorize_sc_opts,
    $cuffcmp_opts, $deps, $run, $out);


my $is_valid_option = GetOptions('help|?'            => \$help,
                                 'quiet'             => \$quiet,
				 'setup'             => \$setup,
				 'run'               => \$run, 
				 'cuffcompare=s'     => \$cuffcmp_opts,
				 'out=s'             => \$out,
				 'cat-ncRNAs=s'      => \$categorize_sc_opts,
				 'fetch-seq=s'       => \$fetch_sc_opts,
				 'get-feat=s'        => \$get_uq_sc_opts);

my $CAT_SC = 'categorize_ncRNAs.pl';
my $FETCH_SC = 'fetch_seq_from_ucsc.pl';
my $GET_UQ_SC = 'get_unique_features.pl';
my $USER_HOME = $ENV{'HOME'};

setup_ncRNAScan(`pwd`) if (defined $setup);
run_ncRNAScan(`pwd`) if (defined $run);

sub run_ncRNAScan {
    chomp(my $ran_fromHere = shift);
    my $outdir;

    $ran_fromHere .= '/' if ($ran_fromHere !~ m/\/$/);
    
    open(my $pl_dep_paths_fh, '<', $USER_HOME . '/.ncRNAScan.PERLLIBS') ||
	die "\nCannot open $USER_HOME/.ncRNAScan.PERLLIBS. May be setup was unsuccessful (?): $!\n\n";
    my $pl_dep_paths = do { local $/; <$pl_dep_paths_fh> };
    my $pl_inc_string = source_env($pl_dep_paths);

    # We will quit, if the setup was unsuccessful.
    require IO::Routine;
    my $io = IO::Routine->new($help, $quiet);

    if (!defined $outdir) {
	$outdir = $io->validate_create_path($out, 'do not create',
					    'Directory path to ncRNAScan pipeline');
    }
    else {
	$outdir = $io->validate_create_path($out, 'create',
					    'Directory path to ncRNAScan pipeline')
    }

    my $s_time = $io->start_timer;
    $io->c_time('Starting ncRNAScan Pipeline...');

    my $dep_tools_fh = $io->open_file('<', $USER_HOME . '/.ncRNAScan.depconf');
    my $dep_tools = do {local $/; <$dep_tools_fh>};
    ($deps->{'cuffcompare'}) = ($dep_tools =~ m/(.+?cuffcompare)/i);
    ($deps->{'blastall'}) = ($dep_tools =~ m/(.+?blastall)/i);
    ($deps->{'RNAfold'}) = ($dep_tools =~ m/(.+?rnafold)/i);
    ($deps->{'cat'}) = ($dep_tools =~ m/(.+?$CAT_SC)/i);
    ($deps->{'fetch'}) = ($dep_tools =~ m/(.+?$FETCH_SC)/i);
    ($deps->{'get'}) = ($dep_tools =~ m/(.+?$GET_UQ_SC)/i);

    $io->c_time('Validating options...');
    $io->verify_options([$is_valid_option]);
    $io->exist_sys_cmd(['mkdir']);

    my $cuffcmp_dir = $outdir . 'cuffcompare';    

    # Run cuffcompare ################################################################################
    do {

	$io->c_time('Module 1: Running cuffcompare...');
	$io->execute_system_command("mkdir -p $cuffcmp_dir",
				    'Making output directory for cuffcompare [ ' . $cuffcmp_dir . ' ]')
	    if (!-d $cuffcmp_dir);
	
	$io->execute_system_command($deps->{'cuffcompare'} . ' ' .
                                join('-', split(/\-/, $cuffcmp_opts)) .
				    " -o $cuffcmp_dir/ncRNAScan_cuffcmp ", 
				    "Command call:\n" .
				    "-------------\n" . $deps->{'cuffcompare'} . ' ' . 
				    join('-', split(/\-/, $cuffcmp_opts)) .
				    " -o $cuffcmp_dir/ncRNAScan_cuffcmp ");
    
    } if (defined($cuffcmp_opts) && $cuffcmp_opts ne '');
    

    # Run categorize_ncRNAs.pl ########################################################################
    do {

	$io->c_time('Module 2: Running categorize_ncRNAs.pl');
	my $cat_dir = $outdir . 'categorize_ncRNAs';
	$io->execute_system_command("mkdir -p $cat_dir",
				    'Making output directory for ' . $io->file_basename($deps->{'cat'}, 'suffix') . ' [ ' . $cat_dir . ' ]')
	    if (!-d $cat_dir);
	
	$io->execute_system_command('perl' . $pl_inc_string . $deps->{'cat'} . ' ' .
				    join('-', split(/\-|\--/, $categorize_sc_opts)) .
				    " -cuffcmp $cuffcmp_dir/ncRNAScan_cuffcmp.tracking -out $cat_dir ", 
				    "Command call:\n" .
				    "-------------\n" . $deps->{'cat'} . ' ' . 
				    join('-', split(/\-|\--/, $categorize_sc_opts)) . 
				    " -cuffcmp $cuffcmp_dir/ncRNAScan_cuffcmp.tracking -out $cat_dir ");
    
    } if (defined($categorize_sc_opts) && $categorize_sc_opts ne '');

    # Run get_unique_features.pl ######################################################################
    do {

	$io->c_time('Module 3: Running get_unique_features.pl');
        my $cat_dir = $outdir . 'get_unique_features';
        $io->execute_system_command("mkdir -p $cat_dir",
                                    'Making output directory for ' . $io->file_basename($deps->{'get'}, 'suffix') . ' [ ' . $cat_dir . ' ]')
            if (!-d $cat_dir);

        $io->execute_system_command('perl' . $pl_inc_string . $deps->{'get'} . ' ' .
                                    join('-', split(/\-|\--/, $get_uq_sc_opts)) .
                                    " -q -stdout ",
                                    "Command call:\n" .
                                    "-------------\n" . $deps->{'get'} . ' ' .
                                    join('-', split(/\-|\--/, $get_uq_sc_opts)) .
                                    " -q -stdout ");

    } if (defined($get_uq_sc_opts) && $get_uq_sc_opts ne '');

    # Run fetch_seq_from_ucsc.pl ######################################################################
    do {

	$io->c_time('Module 4: Running fetch_seq_from_ucsc.pl');
        my $cat_dir = $outdir . 'fetch_seq_from_ucsc';
        $io->execute_system_command("mkdir -p $cat_dir",
                                    'Making output directory for ' . $io->file_basename($deps->{'get'}, 'suffix') . ' [ ' . $cat_dir . ' ]')
            if (!-d $cat_dir);

        $io->execute_system_command('perl' . $pl_inc_string . $deps->{'fetch'} . ' ' .
                                    join('-', split(/\-|\--/, $fetch_sc_opts)),
                                    "Command call:\n" .
                                    "-------------\n" . $deps->{'fetch'} . ' ' .
                                    join('-', split(/\-|\--/, $fetch_sc_opts)));

    } if (defined($fetch_sc_opts) && $fetch_sc_opts ne '');

    $io->c_time('ncRNAScan Pipeline Finished!');
    $io->end_timer($s_time);
}

sub setup_ncRNAScan {
    chomp(my $install_dir = shift);
    chomp(my $dl_util = `which wget 2>&1`);

    print "\nChecking for platform independent prerequisites on UNIX based machines...\n";

    # Wget or Curl
    if ($dl_util !~ m/.+?wget$/i) {
	chomp ($dl_util = `which curl 2>&1`);
	succ_or_fail(0, 'Curl|Wget')
	    if ($dl_util !~ m/.+?curl$/i);
	succ_or_fail(1, 'curl');
        $dl_util .= ' -LkO ';
    }
    elsif ($dl_util =~ m/.+?(wget)$/i) {
	succ_or_fail(1, $1);
    }
    else{
	succ_or_fail(0, 'Curl|Wget');
    }

    # Unzip
    check_util('unzip');

    # Make
    check_util('make');

    # Echo
    check_util('echo');

    # Uname
    check_util('uname');

    print "\n\nWe definetely need the custom module, IO::Routine.\n" .
      "We also need good grace of cpanm to install remaining modules.\n\n" .
	"Attempting to fetch IO::Routine from Perl-for-Bioinformatics repository on github...\n";

    if (-d "$install_dir/.build") {
	system("rm -rf $install_dir/.build");
    }

    system("mkdir $install_dir/.build");
    succ_or_fail(0, '.build dir') if (!-d "$install_dir/.build");

    system("rm $install_dir/master.zip") if (-e "$install_dir/master.zip");

    my $dl_util_slave = '';
    if ($dl_util =~ m/.*?wget$/i) {
      $dl_util_slave = $dl_util . ' -O master.zip ';
    }
    else {
      $dl_util_slave = $dl_util;
    }
     print "\n$dl_util_slave https://github.com/biocoder/Perl-for-Bioinformatics/archive/master.zip\n\n";
    system("$dl_util_slave https://github.com/biocoder/Perl-for-Bioinformatics/archive/master.zip > /dev/null 2>&1");
    system("mv $install_dir/master.zip $install_dir/.build/master.zip");

    succ_or_fail(0, 'master.zip')
	if (!-e "$install_dir/.build/master.zip");

    print "\nInflating master.zip...\n";
    print "\nunzip -d $install_dir/.build $install_dir/.build/master.zip\n";
    system("unzip -d $install_dir/.build $install_dir/.build/master.zip  > /dev/null 2>&1");

    print "\nInstalling IO::Routine...\n\n";
    system("mkdir $install_dir/PERLLIBS") if (!-d "$install_dir/PERLLIBS");
    my $custom_pm_log = `cd $install_dir/.build/Perl-for-Bioinformatics-master/IO-Routine;perl Makefile.PL PREFIX=$install_dir/PERLLIBS LIB=$install_dir/PERLLIBS/lib && make && make test && make install; 2>&1`;

    if ($custom_pm_log =~ m/fail|error/i) {
	succ_or_fail(0, 'IO::Routine');
    }
    else {
	succ_or_fail(1, 'IO::Routine');
    }

    # Use cpanm to install Set::IntervalTree
    system("$dl_util https://raw.github.com/miyagawa/cpanminus/master/cpanm  > /dev/null 2>&1");
    system("mv cpanm $install_dir/.build");
    system("chmod 755 $install_dir/.build/cpanm");

    cpanm_status($install_dir, 'Set::IntervalTree');
    cpanm_status($install_dir, 'LWP::Simple');
    cpanm_status($install_dir, 'XML::XPath');
    cpanm_status($install_dir, 'XML::XPath::XMLParser');

    print "\n\nThank you cpanm!\n";
    print "\nCleaning up build directory...\n";
    system("rm -rf $install_dir/.build");

    my $pm_path = "$install_dir/PERLLIBS:$install_dir/PERLLIBS/lib:$install_dir/PERLLIBS/lib/perl5";

    require "$install_dir/PERLLIBS/lib/IO/Routine.pm";
    my $io = IO::Routine->new($help, $quiet);

    $io->execute_system_command(0, 'Detecting system architecture...');

    my $sys_arch_info = $io->execute_get_sys_cmd_output('uname -a');

    $io->error('This is not a UNIX based machine ... Aborting installation!')
	if (!$sys_arch_info ||
	    $sys_arch_info !~ m/linux|darwin/i);

    $io->error('It is not a 64-bit machine!' . 
	       "\nIt is your responsibility to make sure that you have the following tools" .
	       " installed for your system architecture and also must be found in \$PATH:\n" .
	       "\nblastall, cuffcompare and RNAfold\n\nBailing out!") 
	if ($sys_arch_info !~ m/x86\_64/i);


    my $sys_arch = '';
    if ($sys_arch_info =~ m/darwin/i) {
	$sys_arch = 'darwin';
	$io->execute_system_command(0, 'Skipping version requirement check for system level commands [ sed ], [ tar ], [ cut ] and [ wc ].' .
				    "\nFreeBSD's tools does not provide version numbers (?)");
	check_util('sed');
	check_util('tar');
	check_util('cut');
	check_util('wc');
    }
    else {
	$sys_arch = 'linux';
	 $io->check_sys_level_cmds(['sed', 'tar', 'cut', 'wc'],
				   ['4.2.1', '0', '8', '8']);
	succ_or_fail(1, 'sed');
	succ_or_fail(1, 'tar');
	succ_or_fail(1, 'cut');
	succ_or_fail(1, 'wc');
    }

    $io->check_sys_level_cmds(['grep'],
			      ['2.5.1']);
    succ_or_fail(1, 'grep');

    print "\n\nSetting up PERL5LIB paths...\n";
    unlink "$USER_HOME/.ncRNAScan.PERLLIBS" if (-e "$USER_HOME/.ncRNAScan.PERLLIBS");
    my $pl_dep_fh = $io->open_file('>', "$USER_HOME/.ncRNAScan.PERLLIBS");
    print $pl_dep_fh $pm_path;

=head1
    if (-e $user_profile) {
	chomp(my $is_perl5lib = $io->execute_get_sys_cmd_output("grep -i 'export PERL5LIB' $user_profile"));
	if ($is_perl5lib !~ m/err/i && $is_perl5lib !~ m/$pm_path/) {
	    $is_perl5lib =~ s/\//\\\//g;
	    $is_perl5lib =~ s/\$/\\\$/g;
	    $pm_path =~ s/\//\\\//g;
	    my $sub_this_pat = $is_perl5lib;
	    $is_perl5lib .= ':' if ($is_perl5lib !~ m/\:\n*$/);
	    print "\n\nAdding paths to ~/.bash_profile...\n";
	    print "\nperl -i -p -e 's/$sub_this_pat/$is_perl5lib$pm_path/' $user_profile\n";
	    system("perl -i -p -e 's/$sub_this_pat/$is_perl5lib$pm_path/' $user_profile");
	}
	elsif($is_perl5lib =~ m/err/i && $is_perl5lib !~ m/$pm_path/) {
	    print "\n\nAdding paths to ~/.bash_profile...\n";
	    print "\necho \"export PERL5LIB=\\\$PERL5LIB:$pm_path\" >> $user_profile\n";
	    system("echo >> $user_profile");
	    system("echo \"# ncRNAScan PERLLIB Paths\" >> $user_profile");
	    system("echo \"export PERL5LIB=\\\$PERL5LIB:$pm_path\" >> $user_profile");
	}
    }
    elsif(!-e $user_profile) {
=cut


#	system("touch $user_profile");
	#print "\nexport PERL5LIB=\\\$PERL5LIB:$pm_path\n";
#	system("echo \"#!/bin/bash\" > $user_profile");
#	system("echo >> $user_profile");
#	system("echo \"# ncRNAScan PERLLIB Paths\" >> $user_profile");
#	system("echo \"export PERL5LIB=\\\$PERL5LIB:$pm_path\" >> $user_profile");
	#system("export PERL5LIB=\\\$PERL5LIB:$pm_path");
#    }
    
    $io->execute_system_command(0,
				"\nChecking for ncRNAScan pipeline tool dependencies..." .
				"\n\nWriting tool dependency chain to $USER_HOME/.ncRNAScan.depconf");

    my $dep_fh = $io->open_file('>', "$USER_HOME/.ncRNAScan.depconf");

    # We will figure out if user is installing at a different location other than
    # from the cloned repo.
    my @inst_file_parts = $io->file_basename($0, 'all');
    chop $inst_file_parts[1] if ($inst_file_parts[1] =~ m/\/$/);
    $install_dir = $inst_file_parts[1] if (-d "$inst_file_parts[1]/.ncRNAScan.depbin" && $inst_file_parts[1] !~ m/^\./);

    print $dep_fh check_bio_util('cuffcompare', $install_dir, $sys_arch), "\n";
    print $dep_fh check_bio_util('blastall', $install_dir, $sys_arch), "\n";
    print $dep_fh check_bio_util('RNAfold', $install_dir, $sys_arch), "\n";
    print $dep_fh "$install_dir/" . $CAT_SC, "\n" if (check_native("$install_dir/" . $CAT_SC));
    print $dep_fh "$install_dir/" . $FETCH_SC, "\n" if (check_native("$install_dir/" . $FETCH_SC));
    print $dep_fh "$install_dir/" . $GET_UQ_SC, "\n" if (check_native("$install_dir/" . $GET_UQ_SC));

    close $dep_fh;
    $io->execute_system_command(0,
				"\n\nSetup complete. See ncRNAScan -h to run the pipeline with options.");
}


# Check for pipeline scripts.
sub check_native {
    my $nat_sc = shift;
    (my $sc) = ($nat_sc =~ m/.*\/(.+?\.pl)$/);

    if (-e $nat_sc) {
	succ_or_fail(1, $sc);
	return 1;
    }
    else {
	succ_or_fail(0, $sc);
    }
    return 0;
}

# Check for dependencies
sub check_bio_util {
    my $cmd = shift;
    my $install_dir = shift;
    my $sys_arch = shift;

    chomp (my $biocmd4arch = `which $cmd 2>&1`);
    my $sandboxed4arch = $sys_arch . '_' . $cmd;

    if ($biocmd4arch !~ m/.*$cmd$/i &&
        -d "$install_dir/.ncRNAScan.depbin" &&
        -e "$install_dir/.ncRNAScan.depbin/$sandboxed4arch") {
        succ_or_fail(1, $cmd);
	$biocmd4arch = "$install_dir/.ncRNAScan.depbin/$sandboxed4arch";
    }
    elsif ($biocmd4arch =~ m/.*$cmd$/i) {
	succ_or_fail(1, $cmd);
    }
    else {
	succ_or_fail(0, $cmd);
    }
    return $biocmd4arch;
}

# Check for system utilities
sub check_util {
    my $cmd = shift;
    chomp (my $util = `which $cmd 2>&1`);

    if ($util !~ m/.+?$cmd/i) {
	succ_or_fail(0, $cmd);
	print "\nAborting...\n\n";
	exit;
    }
    else {
        succ_or_fail(1, $cmd);
    }
    return $util;
}

# Print success or failure
sub succ_or_fail {
    my $code = shift;
    my $msg = shift;

    my $char_white_space = 70 - length($msg);

    print "\n";
    printf("%s%*s%s", $msg, $char_white_space, '... ', BOLD GREEN . 'OK' . RESET)
	if ($code == 1);

    if ($code == 0) {
	printf("%s%*s%s", $msg, $char_white_space, '... ',  BOLD RED . 'FAIL' . RESET);
	print "\n\n";
	exit;
    }

    printf("%s%*s%s", $msg, $char_white_space, '... ', BOLD YELLOW . 'SKIP' . RESET)
         if ($code == 2);
    return;
}

# Source the environment
sub source_env {
    chomp(my $pl_paths = shift);
    my $perl_inc_string = ' ';
    
    foreach my $pl_path (split(/\:/, $pl_paths)) {
	$perl_inc_string .= '-I' . $pl_path . ' ';
	push @INC, $pl_path;
    }
    return $perl_inc_string;
}

# Report cpanm status
sub cpanm_status {
    my $install_dir = shift;
    my $pm = shift;
    my $cpanm_log = `$install_dir/.build/cpanm -f -l $install_dir/PERLLIBS $pm 2>&1`;

    succ_or_fail(0, $pm) if ($cpanm_log !~ m/.*?success.*/i);
    succ_or_fail(1, $pm);
    return;
}
